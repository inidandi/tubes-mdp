# -*- coding: utf-8 -*-
"""MDP - Klasifikasi Stroke.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_AkPxZSpx_JFFjxOaxihGLRbj154Sjgy
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score
import seaborn as sns

# Load Data
data = pd.read_csv('https://raw.githubusercontent.com/inidandi/tubes-mdp/main/healthcare-dataset-stroke-data.csv', delimiter=',', encoding='UTF-8')

# Menampilkan Data (5 baris pertama)
data.head()

# Mengecek informasi dataset
data.info()

# Menghitung jumlah nilai null yang ada dalam dataset
data.isnull().sum()

print('Nilai gender : ', pd.unique(data.gender))
print('Nilai Residence_type : ', pd.unique(data.Residence_type))
print('Nilai smoking_status : ', pd.unique(data.smoking_status))

print('Jumlah gender Other : ', (data.gender == 'Other').sum())
print('Jumlah gender Unknown : ', (data.smoking_status == 'Unknown').sum())

# Menghapus kolom id
data = data.drop(['id'], axis=1)

# Menghapus data dengan nilai gender Other
data = data.drop(index=data[data.gender == 'Other'].index)

# Menghapus data missing values dari seluruh dataset 
data = data.dropna()

# Mengecek informasi dataset
data.info()

# Memberi Label untuk fitur atau atribut categorical
label_encoder = LabelEncoder()
data['gender'] = pd.DataFrame(label_encoder.fit_transform(data['gender']), index=data.index)
data['ever_married'] = pd.DataFrame(label_encoder.fit_transform(data['ever_married']), index=data.index)
data['work_type'] = pd.DataFrame(label_encoder.fit_transform(data['work_type']), index=data.index)
data['Residence_type'] = pd.DataFrame(label_encoder.fit_transform(data['Residence_type']), index=data.index)
data['smoking_status'] = pd.DataFrame(label_encoder.fit_transform(data['smoking_status']), index=data.index)

# Mengecek data outlier pada fitur age
sns.boxplot(x=data['age'])

# Mengecek data outlier pada fitur work_type
sns.boxplot(x=data['work_type'])

# Mengecek data outlier pada fitur avg_glucose_level
sns.boxplot(x=data['avg_glucose_level'])

# Mengecek data outlier pada fitur bmi
sns.boxplot(x=data['bmi'])

# Menghapus data outliers
Q1 = data['avg_glucose_level'].quantile(0.25)
Q3 = data['avg_glucose_level'].quantile(0.75)
IQR=Q3-Q1
data['avg_glucose_level']=data['avg_glucose_level'][~((data['avg_glucose_level']<(Q1-1.5*IQR))|(data['avg_glucose_level']>(Q3+1.5*IQR)))]

# Mengecek data outlier pada fitur avg_glucose_level
sns.boxplot(x=data['avg_glucose_level'])

# Menghapus data outliers
Q1 = data['avg_glucose_level'].quantile(0.25)
Q3 = data['avg_glucose_level'].quantile(0.75)
IQR=Q3-Q1
data['avg_glucose_level']=data['avg_glucose_level'][~((data['avg_glucose_level']<(Q1-1.5*IQR))|(data['avg_glucose_level']>(Q3+1.5*IQR)))]

# Mengecek data outlier pada fitur avg_glucose_level
sns.boxplot(x=data['avg_glucose_level'])

# Menghapus data outliers
Q1 = data['avg_glucose_level'].quantile(0.25)
Q3 = data['avg_glucose_level'].quantile(0.75)
IQR=Q3-Q1
data['avg_glucose_level']=data['avg_glucose_level'][~((data['avg_glucose_level']<(Q1-1.5*IQR))|(data['avg_glucose_level']>(Q3+1.5*IQR)))]

# Mengecek data outlier pada fitur avg_glucose_level
sns.boxplot(x=data['avg_glucose_level'])

# Menghapus data outliers
Q1 = data['avg_glucose_level'].quantile(0.25)
Q3 = data['avg_glucose_level'].quantile(0.75)
IQR=Q3-Q1
data['avg_glucose_level']=data['avg_glucose_level'][~((data['avg_glucose_level']<(Q1-1.5*IQR))|(data['avg_glucose_level']>(Q3+1.5*IQR)))]

# Mengecek data outlier pada fitur avg_glucose_level
sns.boxplot(x=data['avg_glucose_level'])

# Menghapus data outliers
Q1 = data['avg_glucose_level'].quantile(0.25)
Q3 = data['avg_glucose_level'].quantile(0.75)
IQR=Q3-Q1
data['avg_glucose_level']=data['avg_glucose_level'][~((data['avg_glucose_level']<(Q1-1.5*IQR))|(data['avg_glucose_level']>(Q3+1.5*IQR)))]

# Mengecek data outlier pada fitur avg_glucose_level
sns.boxplot(x=data['avg_glucose_level'])

Q1 = data['work_type'].quantile(0.25)
Q3 = data['work_type'].quantile(0.75)
IQR=Q3-Q1
data['work_type']=data['work_type'][~((data['work_type']<(Q1-1.5*IQR))|(data['work_type']>(Q3+1.5*IQR)))]

# Mengecek data outlier pada fitur work_type
sns.boxplot(x=data['work_type'])

Q1 = data['bmi'].quantile(0.25)
Q3 = data['bmi'].quantile(0.75)
IQR=Q3-Q1
data['bmi']=data['bmi'][~((data['bmi']<(Q1-1.5*IQR))|(data['bmi']>(Q3+1.5*IQR)))]

# Mengecek data outlier pada fitur bmi
sns.boxplot(x=data['bmi'])

Q1 = data['bmi'].quantile(0.25)
Q3 = data['bmi'].quantile(0.75)
IQR=Q3-Q1
data['bmi']=data['bmi'][~((data['bmi']<(Q1-1.5*IQR))|(data['bmi']>(Q3+1.5*IQR)))]

# Mengecek data outlier pada fitur bmi
sns.boxplot(x=data['bmi'])

# menghapus nilai nulll
data = data.dropna()

# Melihat informasi dataset
data.info()

X = data.drop(['stroke'], axis=1)
Y = data['stroke']

# Membagi dataset menjadi data latih (train) dan data uji (test)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 43)

# membuat model Support Vector Classification (SVC)
svm = SVC()

# melakukan pelatihan model terhadap data
svm.fit(X_train, Y_train)

# Mengukur skor akurasi pada data training
Y_pred_train = svm.predict(X_train)
print('accuracy_score : ', accuracy_score(Y_train, Y_pred_train))

# Mengukur skor akurasi pada data testing
Y_pred_test = svm.predict(X_test)
print('accuracy_score : ', accuracy_score(Y_test, Y_pred_test))

# TESTING DATA SEMBARANG
# 1. gender = 0 (Perempuan) & 1 (Laki-Laki)
# 2. age
# 3. hypertension = 0 (Tidak) & 1 (Ya)
# 4. heart_disease = 0 (Tidak) & 1 (Ya)
# 5. ever_married = 0 (Tidak) & 1 (Ya)
# 6. work_type = 0 (Govt_job) & 1 (Never_worked) & 2 (Private) & 3 (Self-employed) & 4 (children)
# 7. Residence_type = 0 (Rural) & 1 (Urban)
# 8. avg_glucose_level
# 9. bmi
# 10. smoking_status = 0 (Unknown) & 1 (formerly smoked) & 2 (never smoked) & 3 (smokes)

data_testing_sembarang = {
    'gender': [1],
    'age': [22],
    'hypertension': [1],
    'heart_disease': [1],
    'ever_married': [1],
    'work_type': [2],
    'Residence_type': [1],
    'avg_glucose_level': [172.87],
    'bmi': [26.4],
    'smoking_status': [1]
    }
svm.predict(pd.DataFrame(data_testing_sembarang))